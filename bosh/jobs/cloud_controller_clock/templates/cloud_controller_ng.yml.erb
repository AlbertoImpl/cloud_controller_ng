<%
  require 'uri'
  
  def discover_external_ip
    networks = spec.networks.marshal_dump

    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    if !network
      _, network = networks.first
    end

    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end

    network.ip
  end
%>
---
#Actually NGX host and port
local_route: <%= discover_external_ip %>
external_port: <%= p("cc.external_port") %>
tls_port: <%= p("cc.tls_port") %>
internal_service_hostname: <%= p("cc.internal_service_hostname") %>

pid_filename: /var/vcap/sys/run/cloud_controller_clock/cloud_controller_clock.pid
newrelic_enabled: false
development_mode: false

external_protocol: <%= p("cc.external_protocol") %>
external_domain: <%= p("cc.external_host") %>.<%= p("system_domain") %>

system_domain_organization: 'unused-spec-property'
system_domain: 'unused-spec-property'
app_domains: ['unused-spec-property']

jobs:
  global:
    timeout_in_seconds: <%= p("cc.jobs.global.timeout_in_seconds") %>
  <% if_p("cc.jobs.app_usage_events_cleanup.timeout_in_seconds") do |timeout| %>
  app_usage_events_cleanup:
    timeout_in_seconds: <%= timeout %>
  <% end %>
  <% if_p("cc.jobs.blobstore_delete.timeout_in_seconds") do |timeout| %>
  blobstore_delete:
    timeout_in_seconds: <%= timeout %>
  <% end %>
  <% if_p("cc.jobs.diego_sync.timeout_in_seconds") do |timeout| %>
  diego_sync:
    timeout_in_seconds: <%= timeout %>
  <% end %>

app_usage_events:
  cutoff_age_in_days: <%= p("cc.app_usage_events.cutoff_age_in_days") %>

service_usage_events:
  cutoff_age_in_days: <%= p("cc.service_usage_events.cutoff_age_in_days") %>

audit_events:
  cutoff_age_in_days: <%= p("cc.audit_events.cutoff_age_in_days") %>

failed_jobs:
  cutoff_age_in_days: <%= p("cc.failed_jobs.cutoff_age_in_days") %>

completed_tasks:
  cutoff_age_in_days: <%= p("cc.completed_tasks.cutoff_age_in_days") %>

pending_droplets:
  frequency_in_seconds: <%= p("cc.pending_droplets.frequency_in_seconds") %>
  expiration_in_seconds: <%= p("cc.staging_timeout_in_seconds") %>

pending_builds:
  frequency_in_seconds: <%= p("cc.pending_builds.frequency_in_seconds") %>
  expiration_in_seconds: <%= p("cc.staging_timeout_in_seconds") %>

diego_sync:
  frequency_in_seconds: <%= p("cc.diego_sync.frequency_in_seconds") %>

default_app_memory: 0 # unused-spec-property
default_app_disk_in_mb: 0 # unused-spec-property
maximum_app_disk_in_mb: 0 # unused-spec-property

instance_file_descriptor_limit: 0 # unused-spec-property

request_timeout_in_seconds: 0 # unused-spec-property

bulk_api:
  auth_user: 'unused-spec-property'
  auth_password: 'unused-spec-property'

internal_api:
  auth_user: <%= p("cc.internal_api_user") %>
  auth_password: "<%= p("cc.internal_api_password") %>"

nginx:
  use_nginx: true
  instance_socket: "/var/vcap/sys/run/cloud_controller_clock/cloud_controller.sock"

index: <%= spec.index %>
name: <%= name %>

info:
  name: 'unused-spec-property'
  build: 'unused-spec-property'
  version: 0 # unused-spec-property
  support_address: 'unused-spec-property'
  description: 'unused-spec-property'

<% if_p("cc.directories") do %>
directories:<% p("cc.directories").each do |key, value| %>
  <%= key %>: <%= value %><% end %>
<% end %>

logging:
  file: /var/vcap/sys/log/cloud_controller_clock/cloud_controller_clock.log
  syslog: vcap.cloud_controller_ng
  level: <%= p("cc.logging_level") %>
  max_retries: <%= p("cc.logging_max_retries") %>

<% if_p("metron_endpoint.host", "metron_endpoint.port") do |host, port| %>
loggregator:
  router: <%= host %>:<%= port %>
<% end %>

doppler:
  url: 'unused-spec-property'

<% db = p("ccdb.databases").find { |db| db["tag"] == "cc" } %>
<% db_role = p("ccdb.roles").find { |role| role["tag"] == "admin" } %>
<%
  database_address = nil
  if_p('ccdb.address') do |host|
    database_address = host
  end.else do
    database_address = link('database').instances[0].address
  end
%>
db: &db
  database: "<%= p("ccdb.db_scheme") == "mysql" ? "mysql2" : p("ccdb.db_scheme") %>://<%= db_role["name"] %>:<%= URI.escape(db_role["password"]) %>@<%= database_address %>:<%= p("ccdb.port") %>/<%= db["name"] %>"
  max_connections: <%= p("ccdb.max_connections") %>
  pool_timeout: <%= p("ccdb.pool_timeout") %>
  log_level: <%= p("cc.db_logging_level") %>
<% if_p('ccdb.ca_cert') do %>
  ca_cert_path: '/var/vcap/jobs/cloud_controller_clock/config/certs/db_ca.crt'
  ssl_verify_hostname: <%= p("ccdb.ssl_verify_hostname") %>
<% end %>

<% system_domain = p("system_domain") %>

uaa:
  url: 'unused-spec-property'
  internal_url: <%= "https://#{p("cc.uaa.internal_url")}:#{p("uaa.ssl.port")}" %>
  resource_id: 'unused-spec-property'
  ca_file: /var/vcap/jobs/cloud_controller_clock/config/certs/uaa_ca.crt
  symmetric_secret: 'unused-spec-property'

# App staging parameters
staging:
  timeout_in_seconds: <%= p("cc.staging_timeout_in_seconds") %>
  minimum_staging_memory_mb: 0 # unused-spec-property
  minimum_staging_disk_mb: 0 # unused-spec-property
  minimum_staging_file_descriptor_limit: 0 # unused-spec-property
  auth:
    user: <%= p("cc.staging_upload_user") %>
    password: "<%= p("cc.staging_upload_password") %>"

default_health_check_timeout: <%= p("cc.default_health_check_timeout") %>
maximum_health_check_timeout: 0 # 'unused-spec-property'

runtimes_file: /var/vcap/jobs/cloud_controller_clock/config/runtimes.yml
stacks_file: /var/vcap/jobs/cloud_controller_clock/config/stacks.yml

shared_isolation_segment_name: 'unused-spec-property'
quota_definitions: {} # unused-spec-property
default_quota_definition: 'unused-spec-property'

# TODO: we believe these blobstore properties are not used by the clock, but our Config parser requires these properties
# Story: https://www.pivotaltracker.com/story/show/136759317
resource_pool:
  blobstore_type: <%= p("cc.resource_pool.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= p("cc.resource_pool.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= p("cc.resource_pool.webdav_config.public_endpoint") %>
    private_endpoint: <%= p("cc.resource_pool.webdav_config.private_endpoint") %>
    username: <%= p("cc.resource_pool.webdav_config.username") %>
    password: <%= p("cc.resource_pool.webdav_config.password") %>
    <% if p("cc.resource_pool.webdav_config.ca_cert") != "" && p("cc.resource_pool.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cloud_controller_clock/config/certs/resource_pool_ca_cert.pem"
    <% end %>
  minimum_size: <%= p("cc.resource_pool.minimum_size") %>
  maximum_size: <%= p("cc.resource_pool.maximum_size") %>
  resource_directory_key: <%= p("cc.resource_pool.resource_directory_key") %>
  <% if_p("cc.resource_pool.cdn") do %>
  cdn:
    uri: <%= p("cc.resource_pool.cdn.uri") %>
    key_pair_id: <%= p("cc.resource_pool.cdn.key_pair_id") %>
    private_key: <%= p("cc.resource_pool.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= p("cc.resource_pool.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= p("cc.resource_pool.fog_aws_storage_options", {}).to_json %>

packages:
  blobstore_type: <%= p("cc.packages.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= p("cc.packages.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= p("cc.packages.webdav_config.public_endpoint") %>
    private_endpoint: <%= p("cc.packages.webdav_config.private_endpoint") %>
    username: <%= p("cc.packages.webdav_config.username") %>
    password: <%= p("cc.packages.webdav_config.password") %>
    <% if p("cc.packages.webdav_config.ca_cert") != "" && p("cc.packages.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cloud_controller_clock/config/certs/packages_ca_cert.pem"
    <% end %>
  app_package_directory_key: <%= p("cc.packages.app_package_directory_key") %>
  max_package_size: <%= p("cc.packages.max_package_size") %>
  <% if_p("cc.packages.cdn") do %>
  cdn:
    uri: <%= p("cc.packages.cdn.uri") %>
    key_pair_id: <%= p("cc.packages.cdn.key_pair_id") %>
    private_key: <%= p("cc.packages.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= p("cc.packages.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= p("cc.packages.fog_aws_storage_options", {}).to_json %>

droplets:
  blobstore_type: <%= p("cc.droplets.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= p("cc.droplets.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= p("cc.droplets.webdav_config.public_endpoint") %>
    private_endpoint: <%= p("cc.droplets.webdav_config.private_endpoint") %>
    username: <%= p("cc.droplets.webdav_config.username") %>
    password: <%= p("cc.droplets.webdav_config.password") %>
    <% if p("cc.droplets.webdav_config.ca_cert") != "" && p("cc.droplets.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cloud_controller_clock/config/certs/droplets_ca_cert.pem"
    <% end %>
  droplet_directory_key: <%= p("cc.droplets.droplet_directory_key") %>
  <% if_p("cc.droplets.cdn") do %>
  cdn:
    uri: <%= p("cc.droplets.cdn.uri") %>
    key_pair_id: <%= p("cc.droplets.cdn.key_pair_id") %>
    private_key: <%= p("cc.droplets.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= p("cc.droplets.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= p("cc.droplets.fog_aws_storage_options", {}).to_json %>

buildpacks:
  blobstore_type: <%= p("cc.buildpacks.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= p("cc.buildpacks.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= p("cc.buildpacks.webdav_config.public_endpoint") %>
    private_endpoint: <%= p("cc.buildpacks.webdav_config.private_endpoint") %>
    username: <%= p("cc.buildpacks.webdav_config.username") %>
    password: <%= p("cc.buildpacks.webdav_config.password") %>
    <% if p("cc.buildpacks.webdav_config.ca_cert") != "" && p("cc.buildpacks.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cloud_controller_clock/config/certs/buildpacks_ca_cert.pem"
    <% end %>
  buildpack_directory_key: <%= p("cc.buildpacks.buildpack_directory_key") %>
  <% if_p("cc.buildpacks.cdn") do %>
  cdn:
    uri: <%= p("cc.buildpacks.cdn.uri") %>
    key_pair_id: <%= p("cc.buildpacks.cdn.key_pair_id") %>
    private_key: <%= p("cc.buildpacks.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= p("cc.buildpacks.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= p("cc.buildpacks.fog_aws_storage_options", {}).to_json %>

db_encryption_key: <%= p("cc.db_encryption_key") %>

disable_custom_buildpacks: false # unused-spec-property

broker_client_timeout_seconds: 0 # unused-spec-property

renderer:
  max_results_per_page: 0 # unused-spec-property
  default_results_per_page: 0 # unused-spec-property
  max_inline_relations_depth: 0 # unused-spec-property

<% if_p("uaa.clients.cc_service_broker_client.secret") do %>
uaa_client_name: "cc_service_broker_client"
uaa_client_secret: <%= p("uaa.clients.cc_service_broker_client.secret") %>
uaa_client_scope: <%= p("uaa.clients.cc_service_broker_client.scope") %>
<% end.else_if_p("uaa.clients.cc-service-dashboards.secret") do %>
uaa_client_name: "cc-service-dashboards"
uaa_client_secret: <%= p("uaa.clients.cc-service-dashboards.secret") %>
uaa_client_scope: <%= p("uaa.clients.cc-service-dashboards.scope") %>
<% end %>

allow_app_ssh_access: false # unused-spec-property

<% if_p("ssl.skip_cert_verify") do |skip_cert_verify|%>
skip_cert_verify: <%= skip_cert_verify %>
<% end %>

app_bits_upload_grace_period_in_seconds: 0 # unused-spec-property

security_group_definitions: [] # unused-spec-property
default_running_security_groups: [] # unused-spec-property
default_staging_security_groups: [] # unused-spec-property

bits_service:
  enabled: <%= p("cc.bits_service.enabled") %>
  <% if p("cc.bits_service.enabled") %>
  public_endpoint: <%= p("cc.bits_service.public_endpoint") %>
  private_endpoint: <%= p("cc.bits_service.private_endpoint") %>
  username: <%= p("cc.bits_service.username") %>
  password: <%= p("cc.bits_service.password") %>
  <% end %>

diego:
  temporary_local_staging: <%= p("cc.diego.temporary_local_staging") %>
  temporary_local_tasks: <%= p("cc.diego.temporary_local_tasks") %>
  temporary_local_apps: <%= p("cc.diego.temporary_local_apps") %>
  temporary_local_sync: <%= p("cc.diego.temporary_local_sync") %>
  temporary_local_tps: <%= p("cc.diego.temporary_local_tps") %>
  temporary_cc_uploader_mtls: <%= p("cc.diego.temporary_cc_uploader_mtls") %>
  temporary_droplet_download_mtls: <%= p("cc.diego.temporary_droplet_download_mtls") %>
  <% if_p("cc.diego.temporary_oci_buildpack_mode") do |value| %>
  temporary_oci_buildpack_mode: <%= value %>
  <% end %>
  nsync_url: <%= p("cc.diego.nsync_url") %>
  stager_url: <%= p("cc.diego.stager_url") %>
  tps_url: <%= p("cc.diego.tps_url") %>
  file_server_url: <%= p("cc.diego.file_server_url") %>
  cc_uploader_url: <%= p("cc.diego.cc_uploader_url") %>
  use_privileged_containers_for_running: <%= p("cc.diego.use_privileged_containers_for_running") %>
  use_privileged_containers_for_staging: <%= p("cc.diego.use_privileged_containers_for_staging") %>
  lifecycle_bundles: <%= p("cc.diego.lifecycle_bundles").to_json %>
  bbs:
    url: <%= p("cc.diego.bbs.url") %>
    key_file: /var/vcap/jobs/cloud_controller_clock/config/certs/mutual_tls.key
    cert_file: /var/vcap/jobs/cloud_controller_clock/config/certs/mutual_tls.crt
    ca_file: /var/vcap/jobs/cloud_controller_clock/config/certs/mutual_tls_ca.crt
  pid_limit: <%= p("cc.diego.pid_limit") %>

<% if p("routing_api.enabled") %>
routing_api:
  url: <%= "https://api.#{system_domain}/routing" %>
  routing_client_name: "cc_routing"
  routing_client_secret: <%= p("uaa.clients.cc_routing.secret") %>
<% end %>
